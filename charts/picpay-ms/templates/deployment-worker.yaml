{{- range .Values.workers }}
{{- $worker := . }}
{{- if $worker.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Values.global.app_name }}-worker-{{ $worker.name }}
  namespace: ms-{{ $.Values.global.app_name }}
  labels:
    app: {{ $.Values.global.app_name }}-worker-{{ $worker.name }}
    managed-by: "kubeapps"
    namespace: ms-{{ $.Values.global.app_name }}
    backstage.io/kubernetes-id: ms-{{ $.Values.global.app_name }}
spec:
  selector:
    matchLabels:
      app: {{ $.Values.global.app_name }}-worker-{{ $worker.name }}
  template:
    metadata:
      labels:
        app: {{ $.Values.global.app_name }}-worker-{{ $worker.name }}
        managed-by: "kubeapps"
        timestamp: {{ date "20060102150405" $.now | quote }}
        version: {{ $.Values.global.image.tag }}
        namespace: ms-{{ $.Values.global.app_name }}
        {{- if $.Values.global.jvm_metrics.enabled}}
        jvm-metrics: enabled
        {{- end}}
        {{- if $.Values.global.metrics.enabled}}
        metrics: enabled
        {{- end}}
        backstage.io/kubernetes-id: ms-{{ $.Values.global.app_name }}
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      priorityClassName: {{ $worker.priority | default "worker" }}
      {{- if $worker.volumes}}
      volumes:
        {{- with $worker.volumes -}}
            {{ toYaml . | nindent 8 }}
        {{- end }}
      {{- end}}
      containers:
      {{- if $worker.sidecar }}
      {{- range $worker.sidecar }}
      - name: {{ $.Values.global.app_name }}-worker-{{ $worker.name }}-{{ .name }}
        image: {{ .image }}
        imagePullPolicy: IfNotPresent
        {{- if .volumeMounts }}
        volumeMounts:
          {{- range .volumeMounts }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
          {{- end }}
        {{- end }}
        {{- if .command }}
        command: {{ .command }}
        {{- end }}
        {{- if .args }}
        args: {{ toJson .args }}
        {{- end }}
        {{- if .env }}
        env: {{ toYaml .env | nindent 8 }}
        {{- end }}
        {{- if .envFrom }}
        envFrom: {{ toYaml .envFrom | nindent 8 }}
        {{- end}}
        resources:
          limits:
            {{- if .limits_cpu }}
            cpu: {{ .limits_cpu }}
            {{- end }}
            memory: {{ .limits_memory | default "256Mi" }}
          requests:
            cpu: {{ .requests_cpu | default "100m" }}
            memory: {{ .requests_memory | default "128Mi" }}
      {{- end}}
      {{- end}}
      - name: {{ $.Values.global.app_name }}-worker-{{ $worker.name }}
        {{- if not $worker.tag }}
        image: {{ $worker.image }}:{{ $.Values.global.image.tag }}
        {{- else }}
        image: {{ $worker.image }}:{{ $worker.tag }}
        {{- end }}
        imagePullPolicy: IfNotPresent
        {{- if $worker.volumeMounts }}
        volumeMounts:
          {{- range $worker.volumeMounts }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
          {{- end }}
        {{- end }}
        {{- if $worker.command }}
        command: [ {{ $worker.command | quote }} ]
        {{- end }}
        {{- if $worker.args }}
        {{- if eq (kindOf $worker.args) "slice" }}
        args: {{ toJson $worker.args}}
        {{- end }}
        {{- if eq (kindOf $worker.args) "string" }}
        args: [ {{ $worker.args | quote }} ]
        {{- end }}
        {{- end }}
        env:
        - name: APP_NAME
          value: {{ $.Values.global.app_name }}
        - name: APP_WORKER_NAME
          value: {{ $.Values.global.app_name }}-worker-{{ $worker.name }}
        - name: APP_STAGE
          value: {{ $.Values.global.app_stage }}
        {{- if $worker.env }}{{ toYaml $worker.env | nindent 8}}{{- end }}
        {{- if $worker.envFrom }}
        envFrom: {{ toYaml $worker.envFrom | nindent 8}}
        {{- end }}
        resources:
          limits:
            cpu: {{ $worker.limits_cpu | default $worker.request_cpu }}
            memory: {{ $worker.limits_memory | default $worker.request_memory }}
          requests:
            cpu: {{ $worker.requests_cpu }}
            memory: {{ $worker.requests_memory }}
        {{- if not (empty .liveness) }}
        livenessProbe:
          {{- if ne (get $worker.health "tcp") "" }}
          tcpSocket:
            port: container-port
          {{- else if ne (get $worker.health "path") "" }}
          httpGet:
            path: {{ $worker.health.path }}
            port: container-port
          {{- else if $worker.health.command }}
          exec:
            command:
            {{- range $worker.health.command }}
              - {{ . | quote}}
            {{- end }}
          {{- end}}
          initialDelaySeconds: {{ default 60 $worker.liveness.initialDelaySeconds }}
          periodSeconds: {{ default 30 $worker.liveness.periodSeconds }}
          successThreshold: 1
          failureThreshold: {{ default 3 $worker.liveness.failureThreshold }}
          timeoutSeconds: {{ default 3 $worker.liveness.timeoutSeconds }}
        {{- end}}
        {{- if not (empty .readiness) }}
        readinessProbe:
          {{- if ne (get $worker.health "path") "" }}
          httpGet:
            path: {{ $worker.health.path }}
            port: container-port
          {{- else if $worker.health.command }}
          exec:
            command:
            {{- range $worker.health.command }}
              - {{ . | quote}}
            {{- end }}
          {{- end }}
          initialDelaySeconds: {{ default 0 $worker.readiness.initialDelaySeconds }}
          periodSeconds: {{ default 30 $worker.readiness.periodSeconds }}
          successThreshold: {{ default 1 $worker.readiness.successThreshold }}
          failureThreshold: {{ default 3 $worker.readiness.failureThreshold }}
          timeoutSeconds: {{ default 3 $worker.readiness.timeoutSeconds }}
        {{- end}} 
      dnsPolicy: ClusterFirst
      restartPolicy: Always
{{- if $worker.hostAliases}}
      hostAliases:
{{ toYaml $worker.hostAliases | indent 6 }}
{{- end}}
{{- end }}
{{- end }}
