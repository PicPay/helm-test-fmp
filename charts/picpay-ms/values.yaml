global:
  app_name: example
  image:
    tag: "INFORME A TAG"
  resources: {}
  app_stage: test
  namespace:
    labels:
      istio.io/rev: 1-9
  cronjob:
    historylimit:
      failed: "3"
      successful: "3"
  jvm_metrics:
    enabled: false
  metrics:
    enabled: false

apis: []
  # - name: api
  #   image:
  #     repositoryURI: 289208114389.dkr.ecr.us-east-1.amazonaws.com/picpay-dev/example
  #   containerPort: 80
  #   args: "api"
  #   workload: compute
  #   service:
  #     enabled: true
  #     port: 80
  #     targetPort: 80
  #   ingress:
  #     - type: external-api
  #       name: external-api-01
  #       hosts:
  #         - hostname: example.ppay.me
  #         - hostname: example.ms.test.limbo.work
  #     - type: internal-api
  #       name: internal-api-02
  #       annotations:
  #         nginx.ingress.kubernetes.io/rewrite-target: /$2
  #       hosts:
  #         - hostname: example.ppay.me
  #           serviceName: serviceX
  #           servicePort: 1000
  #         - hostname: example.ppay.me
  #           path: /somepath/*
  #           serviceName: serviceY
  #           servicePort: 1000
  #         - hostname: example.ms.test.limbo.work
  #       path: /test(/|$)(.*)
  #       http:
  #         - path: /*
  #           serviceName: ssl-redirect
  #           servicePort: use-annotation
  #   hpa:
  #     enabled: true
  #     min: 1
  #     max: 5
  #     metrics:
  #       - type: Resource
  #         resource:
  #           name: cpu
  #           target:
  #             type: Utilization
  #             averageUtilization: 80
  #   limits_memory: 512Mi
  #   requests_cpu: 100m
  #   requests_memory: 200Mi
  #   health:
  #     path: /health
  #   readiness:
  #     initialDelaySeconds: 5
  #   liveness:
  #     initialDelaySeconds: 10
  #   hostAliases:
  #     - ip: "127.0.0.1"
  #       hostnames: "echo.foo"
  #   podDisruptionBudget:
  #     enabled: true
  #     minAvailable: 1

workers: []
  # - name: batch
  #   image: 289208114389.dkr.ecr.us-east-1.amazonaws.com/picpay-dev/example
  #   command: /docker-env.sh
  #   args: /app/artisan queue:work --sleep=3 --tries=1 --daemon
  #   workload: general
  #   spot_suport: true
  #   request_memory: 256Mi
  #   limit_memory: 512Mi
  #   request_cpu: 100m
  #   limit_cpu: 150m
  #   hpa:
  #     enabled: true
  #     min: 1
  #     max: 5
  #   enabled: true
  #   podDisruptionBudget:
  #     enabled: true
  #     minAvailable: 1
  #   rollingUpdateMaxSurge: 1
  #   rollingUpdateMaxUnavailable: 1

cronjobs: []
  # - name: cron
  #   image: 289208114389.dkr.ecr.us-east-1.amazonaws.com/picpay-dev/example
  #   command: /docker-env.sh
  #   args: /app/artisan schedule:run
  #   workload: compute
  #   memory: 256Mi
  #   cpu: 100m
  #   schedule: "* * * * *"
  #   ttl: 60
  #   enabled: true
  #   historylimit:
  #     failed: "3"
  #     successful: "3"

configmaps: []
  # - name: example
  #   labels:
  #     label-1: "value"
  #   annotations:
  #     annotation-1: "value"
  #   data:
  #     key-1: |
  #       value
  #     key-2: "value"
